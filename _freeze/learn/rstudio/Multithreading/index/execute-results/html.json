{
  "hash": "e81261bf6486235f58792e63a63a65fd",
  "result": {
    "markdown": "---\ntitle:  '{{< animate fadeInDown \"Enable Multithread with data.table in Mac/Intel chips\"delay=.6s >}}'\nsubtitle: '{{< animate fadeInDown \"Multithreading offers faster and more efficient data processing, allowing for quicker analysis of complex datasets.\"delay=.6s >}}'\nauthor: [\"Jorge Roa\", \"Fernando Alarid-Escudero\"]\ndate: \"2022-07-28\"\ncategories: [\"Multithread\", \"Data table\"]\ntoc: true\ndraft: false\ncode-link: true\ncode-copy: true\ntitle-block-banner: true\nimage: images/apple_intel_f.png\ninclude-in-header: meta.html\n---\n\n\n![](images/appleintel.png){fig-align=\"center\"}\n\nThis document shows you how we can enable the use of multiple cores on Macs with Intel/Apple silicon chips (M1 and M2).\n\n------------------------------------------------------------------------\n\nIf we load data.table library in {{< fa brands r-project >}} studio, this message will appear in your console:\n\n\\vspace{1cm}\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/dt.png)\n:::\n\n\\vspace{1cm}\n\nAs you can see, OpenMP support is needed to use multiple cores in Macs. Therefore, we must install those packages through the terminal and set the required paths to run OpenMP.\n\n# Prerequisites\n\n1)  Have the latest version of {{< fa brands r-project >}} studio.\n\n2)  Have the latest version of Mac Ventura\n\n# First Step\n\n1)  Open your terminal. It should see like this:\n\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/firststep.png){fig-align=\"center\"}\n:::\n\n# Second Step (Install homebrew)\n\n\n![](images/homebrew.png){width=\"400\" fig-align=\"center\"}\n\n\n[](https://brew.sh/) is an open-source software package management system that makes installing applications on Linux and Apple's macOS operating systems easier. Homebrew will help us install **`OpenMP`**. Open Multi-Processing allows us to run applications in parallel to efficient processes. In this case, we want to employ the multiple cores that Mac has for **`data.table`** wrangling.\n\nAs the Homebrew page states, Homebrew installs the stuff you need that Apple (or your Linux system) didn't. So, once we open our terminal, we need to paste this command on our terminal.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\n/bin/bash -c \"$(curl -fsSL \nhttps://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n:::\n\n\nTo install **`homebrew`**, you need to enter your password and press **`ENTER`**. After installing homebrew, you should see in your terminal this screen:\n\n\\vspace{-2cm}\n\n![](images/secondstep_home.png)\n\n\n# Third Step (Check package and change paths)\n\nWe need to be sure that homebrew was installed in the correct path. For this, we can type in the terminal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew help\n```\n:::\n\n\nWe need to set our paths properly if the command is not recognized.\n\n| Apple chips ![](images/Apple-Silicon.png){width=\"30\"}|\n|---------------------------------|\n|    **`export PATH=/opt/homebrew/bin:$PATH`**    \n| Intel chips ![](images/intel.png){width=\"40\" height=\"15\"}|\n| **`export PATH=/usr/local/opt/homebrew/bin:$PATH`** |\n\n\nWith these changes, we can rerun homebrew help, and this information should appear in our terminal.\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/brew_help.png)\n:::\n\n# Fourth Step: Installing required packages (libopenmp, libopenmpt, llvm, cask, ggc)\n\n\\vspace{-.5cm}\n\n## Install llvm\n\nWe need to install the llvm package to access the clang compiler, which helps us to set multithreading.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install llvm\n```\n:::\n\n\n\\vspace{-1cm}\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/llvm.png)\n:::\n\nOnce the installation is finished, we should see this screen in the terminal.\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/llvm_end.png)\n:::\n\n## Install libopenmp\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install libopenmp\n```\n:::\n\n\nThis is the screen that you should see once the installation is done.\n\n\n![](images/libopenmp.png){fig-align=\"center\"}\n\n\n## Install libopenmpt\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install libopenmpt\n```\n:::\n\n\nThis is the screen that you should see once the installation is done.\n\n\\vspace{-1cm}\n\n\n![](images/libopenmpt.png){fig-align=\"center\"}\n:::\n\n## Install gcc\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install gcc\n```\n:::\n\n\nThis is the screen that you should see once the installation is done.\n\n\\vspace{-1cm}\n\n\n![](images/ggc.png){fig-align=\"center\"}\n\n\n## Install --cask openmtp\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install --cask openmtp\n```\n:::\n\n\nThis is the screen that you should see once the installation is done.\n\n\n\n![](images/cask.png){fig-align=\"center\"}}\n\n\n# Fifth Step: create .R folder and Makevars file.\n\nWe need to create a text file called **`Makevars`**. This file is necessary because we need to set a file with multiple paths where we will retrieve the various packages we have installed in our R environment. We need to open a new script or open our terminal to execute the next commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create('~/.R')\n\nfile.create('~/.R/Makevars')\n```\n:::\n\n\n**`dir.create`** creates a hidden folder in our environment, and **`file.create`** creates a text file in the folder we just created. This folder is located in our usrs folder. You can access your user folder and your hidden folders with the next shortcuts:\n\n|        Open Finder        |       Shortcuts       |\n|:-------------------------:|:---------------------:|\n|  Go to your home folder:  | **`CMD + Shift + H`** |\n| Show your hidden folders: | **`CMD + Shift + .`** |\n\nYou should have this path (according to your chip).\n\n::: {layout=\"[[-1], [1], [-1]]\"}\n![](images/path2.png)\n:::\n\n# Sixth Step: Create our paths in our Makevars file.\n\nWe need to open our Makevars file with TextEdit, and we must paste the following paths according to our chip (Apple Silicon or Intel)\n\n## Apple Silicon\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nHOMEBREW_LOC=/opt/homebrew \nLLVM_LOC=$(HOMEBREW_LOC)/opt/llvm \nCC=$(LLVM_LOC)/bin/clang -fopenmp \nCXX=$(LLVM_LOC)/bin/clang++ -fopenmp \nCFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe \nCXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe \nLDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib \nCPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include\n```\n:::\n\n\n\n![](images/makevar_mac.png){fig-align=\"center\"}\n\n\n## Intel\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nHOMEBREW_LOC=/usr/local\nLLVM_LOC=$(HOMEBREW_LOC)/opt/llvm\nCC=$(LLVM_LOC)/bin/clang -fopenmp \nCXX=$(LLVM_LOC)/bin/clang++ -fopenmp \nCFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe \nCXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe \nLDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib \nCPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include\n\n```\n:::\n\n\n\n![](images/makevar_intel.png){fig-align=\"center\"}\n\n\nOnce you put the paths, save the text file and close it. The difference between Apple Silicon and Intel is just the path; everything else remains similar. For Apple Silicon, the path is **`/opt/homebrew`** and for Intel is **`/usr/local`**.\n\n# Seventh Step: Reinstall data.table and set your cores.\n\nFinally, we need to remove data.table and reinstall it via **`source`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove.packages(\"data.table\")\ninstall.packages('data.table', type='source')\n```\n:::\n\n\nIf everything was done correctly, you should load the package with library(data.table) and see the following message.\n\n\n![](images/library.png){fig-align=\"center\"}\n\nRemember that you can set more threads with **`setDTthreads`** (according to the specifications of your computer). Happy coding!\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}