{
  "hash": "d80354785db5146d10cf56aa9bb26631",
  "result": {
    "markdown": "---\ntitle:  '{{< animate fadeInDown \"RStudio 101\"delay=.6s >}}'\nsubtitle: '{{< animate fadeInDown \"Learn the basics of R: open a project, setting a working directory and navigate RStudio interface\"delay=.6s >}}'\nauthor: [\"Jorge Roa\"]\ndate: \"2023-04-12\"\ncategories: [\"Rstudio\", \"Interface\"]\ntoc: true\ndraft: false\ncode-link: true\ncode-copy: true\ntitle-block-banner: true\ncomments: false\nimage: images/coding.png\ninclude-in-header: meta.html\nfilters:\n   - lightbox\nlightbox: \n  match: auto\n  effect: fade\n  desc-position: left\n  css-class: \"lightwidth\"\n---\n\n\n# Welcome to RStudio\n\n------------------------------------------------------------------------\n\n![](images/rstudio1.png){fig-align=\"center\"}\n\nThis is the window that appears to us when we open R. As you can see, there are multiple things that we will check. But, first we are going to create our first project.\n\n</br>\n\n# Creating our first project\n\n------------------------------------------------------------------------\n\n## Step 1: Opening a new project\n\n![](images/rstudio2.png){fig-align=\"center\"}\n\n-   We will go to File tab and click in \"New Project\".\n\n| 1.-Create Project                                                                        | 2.-Project Type                                                                                           |\n|------------------------------------|------------------------------------|\n| ![](images/rstudio3.png){fig-align=\"center\"}                                             | ![](images/rstudio4.png){fig-align=\"center\"}                                                              |\n| Here you have three options: since you are creating a new project, choose New Directory. | Select the type of project, as you can see, we have different options; or now, we will choose New Project |\n\n</br>\n\n## Step 2: Create our first project\n\n-   Once we open a new project, we need to decide where we want to store our project and all the code we will generate. I'll talk about this later, but putting a project in a separate folder is good practice to have everything ordered.\n\n![](images/rstudio5.png){fig-align=\"center\"}\n\nYour name project should be precise and not too long. In our case, we will name it \"Hertie Coding Club R\"\n\n| 3.-Choose folder                                          | 4.-Icon project in project folder                                                     |\n|------------------------------------|------------------------------------|\n| ![](images/rstudio6.png){fig-align=\"center\"}              | ![](images/rstudio7.png){fig-align=\"center\"}                                          |\n| Here we show the folder in where we will save our project | Once you created your project, it should appear an icon like this within your folder. |\n\n</br>\n\n# Working directory IMPORTANT!\n\n------------------------------------------------------------------------\n\nIn R, the working directory is the folder or directory where R will look for files and where it will save output files. I firmly believe setting the working directory is one of the most critical steps when working with R, as it can save you time and prevent errors.\n\n</br>\n\n## Benefits\n\n::: {.callout-tip}\n## **Benefits**\n-   Setting the working directory `wd()` makes it easier to read and write files in your R script.\n-   When you set the working directory to the folder where your data files are stored, you can simply specify the file names without having to write out the full file path.\n-   This makes your code more readable and easier to maintain.\n-   Setting the working directory can make it easier to share your code with others since they would load the code from the project folder.\n:::\n\n\n::: {.callout-important}\n## **What happens if I don't create a folder for my project?**\n-   If you do not appropriately set the working directory, R may look for files in the wrong location, which can lead to errors and a lot of time wasted\n:::\n\n</br>\n\n# Folder in your projects\n\n------------------------------------------------------------------------\n\n\nThere are multiple ways to decide which folders you should have with your r project.\n\nSome of them look like this: \n\n![https://martinctc.github.io](images/folder.jpg){fig-align=\"center\"} \n\n![Negoita 2021](images/folder2.png){fig-align=\"center\"} \n\n------------------------------------------------------------------------\n\n</br>\n\nPersonally, I like this approach:\n\n![](images/folder3.png){fig-align=\"center\"} \n\n-   **data/:** for processed data\n-   **data-raw/:** for raw data and intermediate datasets (Internet, f.e.)\n-   **figures/:** for save your plots\n-   **analysis/:** for save your scripts\n-   **documents/:** for outlines, drafts, other text\n-   **R/:** for functions\n\n</br>\n\nThis structure is based on these proposed coding framework. \n\n![Alarid et. al. (2019)](images/rstudio21.png){fig-align=\"center\"} \n\nI've been working with this folder structure for a while, and it's super helpful because once you are used to it, it's super fast to search your outputs, scripts, etc. If you want to know more about these approach and why a coding framework is important, please take a look to this work lead by [Fernando Alarid-Escudero and other scholars](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6871515/)\n\n</br>\n\n# Rstudio: taking our first steps.\n\n------------------------------------------------------------------------\n\n\n## Create a script\n\nWe will create our first R Script. For that please go to Fil -> New File -> R Script\n\n![](images/rstudio11.png){fig-align=\"center\"} \n\nOnce we create our script, it will show us a window with a tab called \"Untitled1\". Now, we need to save that script in our analysis folder. For that, we need to go to File -> Save As. Next, we need to select the folder within our project where we want to save our script. Following the good practices recommended here, I'll keep it in my analysis folder. I'm naming my script as \"first_script\".  \n\n\n![File -> R Script](images/rstudio12.png){fig-align=\"center\"} \n\n![](images/rstudio13.png){fig-align=\"center\"} \n\n</br>\n\n# RStudio Panes\n\n------------------------------------------------------------------------\n\n\nIt's important that you have a really clear idea about the RStudio panes concept. This panes allow users to divide the workflow. Each pane can display different types of information, such as code, console output, plots, help files, and data frames. It enables users to organize their workspace in a more efficient way and to customize their RStudio according to their needs. We will explain every R section.\n\n![Main Grafic User Interface](images/rstudio14.png){fig-align=\"center\"} \n\n</br>\n\n## Source\n\n![](images/rstudio16.png){fig-align=\"center\"} \n\n\nThe source pane is the main workspace for creating and editing R scripts, and it provides features for syntax highlighting, code completion, and error checking.\n\n- One of the key features of the source pane is syntax highlighting, which makes it easier to read and understand R code by using different colors and fonts to differentiate between different elements of the code, such as keywords, comments, and functions. \n\nWith this commands, you can select your code and run your code.\n\n| ![](images/apple.png){width=\"30\"} | ![](images/windows.png){width=\"30\"} |\n|:---------------------------------:|:-----------------------------------:|\n|    **\"Command + Return**    | **\"Control + Enter\"** |\n\n\nThis code will excute and it will be showed in the console. \n\n\n</br>\n\n## Console\n\nWhen a user types in a command in the console, like for example assigning a variable or running a function, R processes the command and generates the output, which is displayed in the console. The console is a critical tool for debugging R code, as it allows users to see the output of their commands and to identify errors and bugs in their code. In summary: \n\n-   The console is the heart of R.\n-   Here R actually evaluates your code.\n-   Try to write most of your code in a document in the Source. Only type directly into the Console to de-bug or do quick analyses.\n-   When ready: \\> and If waiting: +\n-   Cancel commands by pressing Esc. to finish a running process.\n\n\n![](images/rstudio17.png){fig-align=\"center\"} \n\n\n![](images/rstudio17_1.png){fig-align=\"center\"} \n\nIn the last pictures, for example, we evaluated the expression\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\nAs you can see, in our console it shows the operation that we ran. (Remember the commands to run your code). One of the shortcuts that I use often is the â†‘ key. Pressing the top arrow shows the last code that you executed; pretty useful if you don't want to rerun your code \n\n\n</br>\n\n## Environment/History\n\n\nIn R, the environment refers to the collection of variables and their values that are currently stored in the memory. Each time a user creates a variable or loads data into R, those variables and data are stored in the environment. One of the things that I like about using RStudio as a IDE is practically this nice way of putting all the varaibles, data functions and every object that you are loading in your environment. In summary, the environment can be thought of as a workspace where the user can manipulate and analyze the data.\n\nThe Environment tab of this panel shows you the names of all the objects that you have been creating. For example, you can see information like the number of observations and rows in data objects; lists, funtions, etc. \n\n\n![](images/rstudio18.png){fig-align=\"center\"} \n\n\n![](images/rstudio18_1.png){fig-align=\"center\"} \n\n\n</br>\n\n\n## Files and more\n\nIn R, files and directories helps you managing data, plots and code. This pane provides access to the files and directories on the user's computer. If you can see close, it will show your current working directory; this helps you to check if you are working in the correct directory. Users can navigate through the file system, create new files and directories, and open or delete existing files. The pane also provides features for searching and filtering files, as well as organizing them into projects. I personally use it to preview plots, install packages and check documentation. \n\n![](images/rstudio19.png){fig-align=\"center\"} \n\n![](images/rstudio19_1.png){fig-align=\"center\"} \n\n\n# References\n\n------------------------------------------------------------------------\n\n::: {.callout-tip}\n## References\n\nAlarid-Escudero, F., Krijkamp, E. M., Pechlivanoglou, P., Jalal, H., Kao, S. Z., Yang, A., & Enns, E. A. (2019). *A Need for Change! A Coding Framework for Improving Transparency in Decision Modeling.* PharmacoEconomics, 37(11), 1329â€“1339. [URL](https://doi.org/10.1007/s40273-019-00837-x)\n\nNegoita, L. (2021, July 5). *How to organize your analyses with R studio projects.* R (for ecology). [URL](https://www.rforecology.com/post/organizing-your-r-studio-projects/)\n:::\n\n\n::: {.callout-note}\nCite this page: Roa, J. (2023, April 12). *RStudio 101*. Hertie Coding Club. [URL](https://www.hertiecodingclub.com/learn/rstudio/rstudio101/)\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}