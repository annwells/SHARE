{
  "hash": "664561b3997516b98f9d46eab2a390af",
  "result": {
    "markdown": "---\ntitle: '{{< animate fadeInDown \"PDF to text\"delay=.6s >}}'\nsubtitle: '{{< animate fadeInDown \"Stop using webites to transform your PDFs into text. Do it by your own with Python and extract text and tables from your documents. \"delay=.6s >}}'\nauthor:\n  - Jorge Roa\ndate: '2023-04-18'\ncategories:\n  - PDF\n  - Text\n  - Transform\ntoc: true\ndraft: false\ncode-link: true\ncode-copy: true\ntitle-block-banner: true\nimage: images/pdf_to_text.png\ninclude-in-header: meta.html\nexecute:\n  freeze: true\n---\n\n![](images/pdf_to_text.png){fig-align=\"center\"}\n\n\nThe ability to extract and manipulate data from PDF files is an essential skill for anyone who works with digital documents. For example: organizations, governments, universities, and businesses use themas tools to publish data. Just imagine this: I've often seen governments publish their data in pdfs as tables. As a public policy maker or as a data analyst, that can be painful; imagine translate all that information by hand or using paid tools as PDFTables or Convert from PDF to Excel online. This is where Python and the `pdfplumber` and `tabulate` libraries comes in handy: it allows us to extract text, tables, and other data from PDF files with ease, making it a valuable tool for data analysis and processing. I would also add that this skill is useful as a crucial step for Natural Language Processing since a lot of potential inputs right now are just in pdf texts. \n\nIn the next lines, I'll show how we can extract text from PDF documents that also includes tables. This approach is easy to understand and reliable, so, anyone can posses and domain this skill; you just need a little bit of knowledge about Python and how we can work with objects.\n\n\n::: callout-warning\n## Important\n\nThe next approach applies only to PDF documents that have text inside and are not scanned documents. If you have a pdf document that are scanned text, then Optical character recognition (OCR) algorithms are necessary to realize this task. This method can be implemented in another entry within the Hertie Coding Club.\n:::\n\n\n \n\nIf you are working within your Python environment, please install this packages. Otherwise, I'll give you the google collab where you can run Python code without installing it in your computer.\n\n::: callout-important\n## Checkout\n\nIf you are running the code locally, please be sure that you have installed the latest Java version since tabulate works within this framework. `tabulate` library uses Java to render the results.\n:::\n\n\n## Install packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\npip install pdfplumber #Library used to extract text from pdf documents\npip install pandas #Library to manipulate dataframes\npip install tabula-py tabulate #Library to extract tables from PDF documents. \n```\n:::\n\n\n## Extract data from a PDF document\n\n\nThis is the [document](https://www.hertie-school.org/fileadmin/1_Study/11_Scholarships_FinancialAid/US_loans/03_MPP_Study__Examination___Admission_Rules.pdf) that we will use to this example. It's a document from the Hertie School that describes the Study, Examination, and Admission Rules in 2016 for the MPP program. Here our goal will be extract all the content from it and put it in a dataframe. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#Import libraries\nimport pdfplumber as pp\nimport pandas as pd\n\n#Set PDF file name\npdf = 'MPP_Study_Example.pdf'\n\n#Open PDF file and extract data from each page\nwith pp.open(pdf) as book:\n    #Initialize an empty list to store text\n    page_data = []\n    #Loop over each page in the PDF file\n    for page_no, page in enumerate(book.pages, start = 1):\n        #Extract text from page\n        data = page.extract_text()\n        #Append page data to list\n        page_data.append([pdf, data.strip(), page_no])\n\n#Create pandas DataFrame from page data and set column names\ndf_text = pd.DataFrame(page_data, columns=['file_name', 'text', 'page_number'])\n\n#Display DataFrame\nprint(df_text)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               file_name                                               text   \n0  MPP_Study_Example.pdf  Master of Public Policy\\nStudy, Examination, a...  \\\n1  MPP_Study_Example.pdf  I. Study Rules\\n§ 1 Object\\nThese study rules ...   \n2  MPP_Study_Example.pdf  (3) Advanced Curriculum\\nIn the second year of...   \n3  MPP_Study_Example.pdf  § 6 Examination Committee\\n(1) An Examination ...   \n4  MPP_Study_Example.pdf  (4) Upon written request, the Examination Comm...   \n5  MPP_Study_Example.pdf  (5) Students can request to be ranked in relat...   \n6  MPP_Study_Example.pdf  (2) In addition to the degree certificate, stu...   \n7  MPP_Study_Example.pdf  (2) If the Examination Committee comes to the ...   \n8  MPP_Study_Example.pdf  2. a high level of proficiency in written and ...   \n\n   page_number  \n0            1  \n1            2  \n2            3  \n3            4  \n4            5  \n5            6  \n6            7  \n7            8  \n8            9  \n```\n:::\n:::\n\n\nWe have three columns. The first one shows the document's name where we extracted the text. The second column contains the text, and the third one the number of pages. Of course, you can modify the code and the variable names according to your necessities. \n\n\nIf you want to save your dataframe, remember this functions:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Save the dataframe to a CSV file\ndf_text.to_csv('df_text_pdf.csv', index=False)\n\n# Save the dataframe to an Excel file\ndf_text.to_excel('df_text_pdf.xlsx', index=False)\n```\n:::\n\n\nIf you look close, there is a table in page number 5. `PDFplumber` renders that as text and not in a table format. One approach to this would be use now the `tabulate` library to extract exclsuively tables from our document. The table inside the document is not clear or doesn't have a completely table format. However, we can still apply our function to extract that table and approach it to a nice table format. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#Import required libraries\nimport tabula\nimport numpy as np\nfrom tabula import read_pdf\nfrom tabulate import tabulate\n\n#Set the path to the PDF file\npdf_path = 'MPP_Study_Example.pdf'\n\n#Read all tables from the PDF file into a list of DataFrames\ndf_list = tabula.read_pdf(pdf_path, pages=\"all\", multiple_tables=True)\n\n#Print the list of DataFrames\nprint(df_list)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[    (2)   \n0   NaN  \\\n1   (3)   \n2   NaN   \n3   NaN   \n4   NaN   \n5   NaN   \n6   (4)   \n7   NaN   \n8   NaN   \n9   (5)   \n10  NaN   \n11  (6)   \n12  NaN   \n13  NaN   \n14  NaN   \n15  (7)   \n16  NaN   \n17  NaN   \n18  (8)   \n\n   The Academic Senate of the Hertie School of Governance elects the faculty members for a  \n0   two-year term and the student representative f...                                       \n1   The Examination Committee meets in camera and ...                                       \n2   the Committee are obliged to maintain secrecy ...                                       \n3   them in their capacity as members of the Commi...                                       \n4   individual students. The members shall also no...                                       \n5                                                end.                                       \n6   The Examination Committee is responsible for t...                                       \n7   shall ensure the timely fulfilment of the regu...                                       \n8                                           involved.                                       \n9   The Examination Committee makes and accepts su...                                       \n10                             the Examination Rules.                                       \n11  Credits earned by a student at another univers...                                       \n12  Examination Committee. The Committee shall app...                                       \n13  regard to study contents, learning objectives,...                                       \n14                           examination requirement.                                       \n15  A student’s professional experience shall be r...                                       \n16  Examination Committee. The Committee shall app...                                       \n17  relevant in respect to contents and learning o...                                       \n18  The Examination Committee shall decide in all ...                                       ,    German Numerical Alphanumeric    Definition\n0   Grade     Grade        Grade           NaN\n1     1,0   100-96%           A+           NaN\n2     NaN       NaN          NaN     excellent\n3     1,3    95-91%            A           NaN\n4     1,7    90-86%           A-           NaN\n5     NaN       NaN          NaN     very good\n6     2,0    85-81%           B+           NaN\n7     2,3    80-76%            B           NaN\n8     NaN       NaN          NaN          good\n9     2,7    75-71%            B           NaN\n10    3,0    70-66%           B-           NaN\n11    NaN       NaN          NaN  satisfactory\n12    3,3    65-61%           C+           NaN\n13    3,7    60-56%            C           NaN\n14    NaN       NaN          NaN    sufficient\n15    4,0    55-50%           C-           NaN\n16    5,0     49-0%            F          fail,    (2) A failed requirement can be repeated twice only if it leads to a failed examination (i.e. if the\n0   weighted average grade of all requirements is ...                                                  \n1   The student shall be given one opportunity to ...                                                  \n2                         of the subsequent semester.                                                  \n3   (3) For the last repetition of an examination ...                                                  \n4                                appoint two graders.                                                  \n5   (4) The regulations concerning the master thes...                                                  \n6                                  § 11 Master Thesis                                                  \n7   (1) Students submit their master thesis to the...                                                  \n8   The submission date shall be determined for ea...                                                  \n9                                          Committee.                                                  \n10  (2) The master thesis shall be supervised by a...                                                  \n11  the Examination Committee can appoint a member...                                                  \n12                                        supervisor.                                                  \n13  (3) The written master thesis is graded by the...                                                  \n14  thesis supervisor and one member of the core f...                                                  \n15  thesis is constituted by the arithmetic mean o...                                                  \n16                                  Thesis Committee.                                                  \n17  (4) Students who fail their written master the...                                                  ,    (1)   \n0  NaN  \\\n1  NaN   \n2  (2)   \n\n  The Admissions Committee decides on admissions in accordance with the guidelines laid  \n0  down by the Dean as well as on the basis of mo...                                     \n1                                         Committee.                                     \n2  The Committee consists of at least six members...                                     ]\n```\n:::\n:::\n\n\nAs you can see, we have a list with three dataframes. Our library recognized 3 tables, however, there is just really one at page 5. Now let's just keep with the one that matter to us. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(df_list[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   German Numerical Alphanumeric    Definition\n0   Grade     Grade        Grade           NaN\n1     1,0   100-96%           A+           NaN\n2     NaN       NaN          NaN     excellent\n3     1,3    95-91%            A           NaN\n4     1,7    90-86%           A-           NaN\n5     NaN       NaN          NaN     very good\n6     2,0    85-81%           B+           NaN\n7     2,3    80-76%            B           NaN\n8     NaN       NaN          NaN          good\n9     2,7    75-71%            B           NaN\n10    3,0    70-66%           B-           NaN\n11    NaN       NaN          NaN  satisfactory\n12    3,3    65-61%           C+           NaN\n13    3,7    60-56%            C           NaN\n14    NaN       NaN          NaN    sufficient\n15    4,0    55-50%           C-           NaN\n16    5,0     49-0%            F          fail\n```\n:::\n:::\n\n\nHere is our table or interest. Let's do some wrangling to clean it. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#Extract the second table from the list and skip the header row\ndf_table = df_list[1].iloc[1:]\n\n#Replace commas with dots and convert to numeric values\ndf_table[\"German\"] = pd.to_numeric(df_table[\"German\"].str.replace(',', '.'), \n                                                              errors='coerce')\n\n#Rename columns\ndf_table = df_table.rename(columns={'German': 'Grade', 'Numerical': 'Percentage'})\n\n#Define a function to map grades to categories. We are doing this\n#since if we use a statement, our code will be larger.\ndef grade(score):\n    if score >= 1 and score <= 1.3:\n        return 'excellent'\n    elif score > 1.3 and score <= 2:\n        return 'very good'\n    elif score > 2 and score <= 2.7:\n        return 'good'\n    elif score > 2.7 and score <= 3.3:\n        return 'satisfactory'\n    elif score > 3.3 and score < 4:\n        return 'sufficient'\n    elif score >= 4:\n        return 'fail'\n    else:\n        return np.nan\n\n#Apply the grade function to create a new column with grade categories\ndf_table['Grade Category'] = df_table['Grade'].apply(grade)\n\n#Drop rows with missing grade categories\ndf_table = df_table.dropna(subset=['Grade Category'])\n\n#Drop the \"Definition\" column\ndf_table = df_table.drop('Definition', axis=1)\n\n#Extract minimum and maximum percentage values to replace the Percentage. \n#Here we use some regex to obtain just the numbers within a \"-\"\ndf_table[['Min%', 'Max%']] = df_table['Percentage'].str.extract(r'(\\d+)-(\\d+)%')\n\n#Convert percentage values to float\ndf_table[['Min%', 'Max%']] = df_table[['Min%', 'Max%']].astype(float) / 100\n\n#Drop the original \"Percentage\" column\ndf_table_final = df_table.drop('Percentage', axis = 1)\n\n#Print the final table\nprint(df_table_final)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Grade Alphanumeric Grade Category  Min%  Max%\n1     1.0           A+      excellent  1.00  0.96\n3     1.3            A      excellent  0.95  0.91\n4     1.7           A-      very good  0.90  0.86\n6     2.0           B+      very good  0.85  0.81\n7     2.3            B           good  0.80  0.76\n9     2.7            B           good  0.75  0.71\n10    3.0           B-   satisfactory  0.70  0.66\n12    3.3           C+   satisfactory  0.65  0.61\n13    3.7            C     sufficient  0.60  0.56\n15    4.0           C-           fail  0.55  0.50\n16    5.0            F           fail  0.49  0.00\n```\n:::\n:::\n\n\n::: {.callout-note}\n## Remember\n\nTo save a dataframe or your table, use this functions:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Save the dataframe to a CSV file\ndf_table_final.to_csv('df_text_pdf.csv', index=False)\n\n# Save the dataframe to an Excel file\ndf_table_final.to_excel('df_text_pdf.xlsx', index=False)\n```\n:::\n\n\n:::\n\n\n \n\n## Extract tables from a PDF document\n\n\nAs you can see, the last example was just a form to deal with a tabl when we don't have a clear pattern of it in a document. Generally, we need another tool to extract a table from a document since it will be much easier because of the `tabula` library it's trained just to recognize tables. Now, we will use another document with cleaner tables, and the library can work even better. We will use a [document](https://sedl.org/afterschool/toolkits/science/pdf/ast_sci_data_tables_sample.pdf) that contains text but also much cleaner tables. \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport tabula\nfrom tabula import read_pdf\nfrom tabulate import tabulate\n\ndf_list_example2 = tabula.read_pdf('ast_sci_data_tables_sample.pdf', \n                                    pages=\"all\", multiple_tables = True)\n\n#We use len to determine how many tables the document has\nlen(df_list_example2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n3\n```\n:::\n:::\n\n\nWe have for tables. Let's see them closer:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint(df_list_example2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[   Number of Coils Number of Paperclips\n0                5              3, 5, 4\n1               10              7, 8, 6\n2               15           11, 10, 12\n3               20           15, 13, 14,     Speed (mph)           Driver                         Car     Engine   \n0       407.447  Craig Breedlove           Spirit of America     GE J47  \\\n1       413.199        Tom Green            Wingfoot Express     WE J46   \n2       434.220       Art Arfons               Green Monster     GE J79   \n3       468.719  Craig Breedlove           Spirit of America     GE J79   \n4       526.277  Craig Breedlove           Spirit of America     GE J79   \n5       536.712       Art Arfons               Green Monster     GE J79   \n6       555.127  Craig Breedlove  Spirit of America, Sonic 1     GE J79   \n7       576.553       Art Arfons               Green Monster     GE J79   \n8       600.601  Craig Breedlove  Spirit of America, Sonic 1     GE J79   \n9       622.407    Gary Gabelich                  Blue Flame     Rocket   \n10      633.468    Richard Noble                    Thrust 2  RR RG 146   \n11      763.035       Andy Green                  Thrust SSC    RR Spey   \n\n        Date  \n0     8/5/63  \n1    10/2/64  \n2    10/5/64  \n3   10/13/64  \n4   10/15/65  \n5   10/27/65  \n6    11/2/65  \n7    11/7/65  \n8   11/15/65  \n9   10/23/70  \n10   10/4/83  \n11  10/15/97  ,    Time (drops of water)  Distance (cm)\n0                      1        10,11,9\n1                      2     29, 31, 30\n2                      3     59, 58, 61\n3                      4   102, 100, 98\n4                      5  122, 125, 127]\n```\n:::\n:::\n\n\nLooks good! Let's say that I just want the second table, so, I use the index of the list to keep with my dataframe.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(df_list_example2[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Speed (mph)           Driver                         Car     Engine   \n0       407.447  Craig Breedlove           Spirit of America     GE J47  \\\n1       413.199        Tom Green            Wingfoot Express     WE J46   \n2       434.220       Art Arfons               Green Monster     GE J79   \n3       468.719  Craig Breedlove           Spirit of America     GE J79   \n4       526.277  Craig Breedlove           Spirit of America     GE J79   \n5       536.712       Art Arfons               Green Monster     GE J79   \n6       555.127  Craig Breedlove  Spirit of America, Sonic 1     GE J79   \n7       576.553       Art Arfons               Green Monster     GE J79   \n8       600.601  Craig Breedlove  Spirit of America, Sonic 1     GE J79   \n9       622.407    Gary Gabelich                  Blue Flame     Rocket   \n10      633.468    Richard Noble                    Thrust 2  RR RG 146   \n11      763.035       Andy Green                  Thrust SSC    RR Spey   \n\n        Date  \n0     8/5/63  \n1    10/2/64  \n2    10/5/64  \n3   10/13/64  \n4   10/15/65  \n5   10/27/65  \n6    11/2/65  \n7    11/7/65  \n8   11/15/65  \n9   10/23/70  \n10   10/4/83  \n11  10/15/97  \n```\n:::\n:::\n\n\n# Conclusion \n\n------------------------------------------------------------------------\n\nNow, we can use this for our own purposes. Asou can see, the process was much straight forward. In conclusion, this is just one approach of multiple ones since there are different libraries depending of what you want to do. However, I like this libraries since are easy to understand. Finally, if you want to reproduce this code, here I leave a Google Colab notebook for you to input your pdf's and get the text out of it. This step is super interesting and I would say necessary to start a pipeline for NLP models, analysis of text, etc. \n\n\n \n\n<div style=\"text-align:center;\">\n[<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" width=\"250\">](https://colab.research.google.com/drive/1qBVCIpBReACYi1Pi81bOWZNw66XsY2mA?usp=sharing)\n</div>\n\n \n \n\n\n------------------------------------------------------------------------\n\n\n\n\n::: callout-note\n## Reference\nCite this page: Roa, J. (2023, April 18). *PDF to text*. Hertie Coding Club. [URL](https://www.hertiecodingclub.com/learn/python/pdf_to_text/)\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}